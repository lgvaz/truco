# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_hand_strength.ipynb.

# %% auto 0
__all__ = ['compare', 'simulate', 'TaskWrapper', 'monte_carlo', 'hand_stregth']

# %% ../nbs/05_hand_strength.ipynb 4
from fastcore.all import *
import polvo as pv
import truco as tr
import numpy as np
import random

# %% ../nbs/05_hand_strength.ipynb 5
def compare(hand1, hand2, round_rank):
    ranks1 = tr.cards2ranks(hand1, round_rank)
    ranks2 = tr.cards2ranks(hand2, round_rank)
    ranks1 = np.sort(ranks1)[-1:-4:-1]
    ranks2 = np.sort(ranks2)[-1:-4:-1]
    return (ranks1 - ranks2)

# %% ../nbs/05_hand_strength.ipynb 6
def simulate(hand, round_rank, card_pool):
    hand2 = random.sample(card_pool, 6)
    return compare(hand, hand2, round_rank)

# %% ../nbs/05_hand_strength.ipynb 7
class TaskWrapper:
    def __init__(self, fn, *args, **kwargs):
        self.fn, self.args, self.kwargs = fn, args, kwargs
        
    def __call__(self, _):
        return self.fn(*self.args, **self.kwargs)

# %% ../nbs/05_hand_strength.ipynb 8
def monte_carlo(hand, round_rank, card_pool, n_simulations):
    return np.array(parallel(TaskWrapper(simulate, hand, round_rank, card_pool), range(n_simulations)))

# %% ../nbs/05_hand_strength.ipynb 9
def hand_stregth(hand, faceup, n_simulations=2000):
    card_pool = tr.round_card_pool(hand, faceup)
    round_rank = tr.round_rank(faceup)
    
    results = monte_carlo(hand, round_rank, card_pool, n_simulations)
    results_sign = np.sign(results)
    wins = np.sign(results_sign.sum(axis=1))
    score, counts = np.unique(wins, return_counts=True)
    return {s: c/len(results) for s, c in zip(score, counts)}
